#include <iostream>
#include <vector>
#include <stack>
#include <queue>
#include <algorithm>
using namespace std;

int n;
int board[11][11];
char chess[11][11];
int bishop = 0;
vector<pair<int, int>> possible;
int dx[4] = {1, 1, -1, -1};
int dy[4] = {1, -1, -1, 1};

int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    cin >> n;
    int pos = 0;
    for(int i=0; i<n; i++) {
        for(int j=0; j<n; j++) {
            cin >> board[i][j];
            if(board[i][j] == 1) {
                pos++;
                possible.push_back({i, j});
            }
        }
    }
    
    for(int bis=1; bis<=pos; bis++) {
        vector<int> v;
        for(int i=0; i<bis; i++) v.push_back(1);
        for(int i=0; i<pos-bis; i++) v.push_back(0);
        sort(v.begin(), v.end());
        
        do {
            for(int i=0; i<n; i++) fill(chess[i], chess[i]+n, '0');
            bool uncatchable = true;
            queue<pair<int, int>> q;
            for(int i=0; i<pos; i++) {
                if(v[i] == 1) {
                    pair<int, int> cur = possible[i];
                    chess[cur.first][cur.second] = 'b';
                    q.push({cur.first, cur.second});
                }
            }
            while(!q.empty()) {
                pair<int, int> cur = q.front();
                q.pop();
                for(int i=0; i<4; i++) {
                    int nx = cur.first + dx[i];
                    int ny = cur.second + dy[i];
                    while(nx >= 0 && nx < n && ny >= 0 && ny < n) {
                        if(chess[nx][ny] == 'b') {
                            uncatchable = false;
                            break;
                        }
                        nx += dx[i];
                        ny += dy[i];
                    }
                    if(!uncatchable) break;
                }
                if(!uncatchable) 
                    while(!q.empty()) q.pop();    
            }
            if(uncatchable) {
                bishop = bis;
                break;
            }
        } while(next_permutation(v.begin(), v.end()));
    }

    cout << bishop;

    return 0;
}
