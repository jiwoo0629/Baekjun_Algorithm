#include <iostream>
using namespace std;

int n, m, a, b, arr[100001];
long long min_tree[400001], max_tree[400001];

int minIdx(int a, int b) {
    if(a == -1) return b;
    if(b == -1) return a;
    if(arr[a] == arr[b]) return a < b ? a : b;
    return arr[a] < arr[b] ? a : b;
}

int maxIdx(int a, int b) {
    if(a == -1) return b;
    if(b == -1) return a;
    if(arr[a] == arr[b]) return a > b ? a : b;
    return arr[a] > arr[b] ? a : b;
}

int min_init(int pos, int start, int end) {
    if(start == end) return min_tree[pos] = start;
    int mid = (start + end) / 2;
    return min_tree[pos] = minIdx(min_init(2*pos, start, mid), min_init(2*pos+1, mid+1, end));
}

int max_init(int pos, int start, int end) {
    if(start == end) return max_tree[pos] = start;
    int mid = (start + end) / 2;
    return max_tree[pos] = maxIdx(max_init(2*pos, start, mid), max_init(2*pos+1, mid+1, end));
}

int min_find(int pos, int start, int end, int left, int right) {
    if(left > end || right < start) return -1;
    if(left <= start && right >= end) return min_tree[pos];
    int mid = (start + end) / 2;
    return minIdx(min_find(2*pos, start, mid, left, right), min_find(2*pos+1, mid+1, end, left, right));
}

int max_find(int pos, int start, int end, int left, int right) {
    if(left > end || right < start) return -1;
    if(left <= start && right >= end) return max_tree[pos];
    int mid = (start + end) / 2;
    return maxIdx(max_find(2*pos, start, mid, left, right), max_find(2*pos+1, mid+1, end, left, right));
}

int main(void)
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> n >> m;
    for(int i=1; i<=n; i++) cin >> arr[i];
    min_init(1, 1, n);
    max_init(1, 1, n);
    for(int i=0; i<m; i++) {
        cin >> a >> b;
        cout << arr[min_find(1, 1, n, a, b)] << " " << arr[max_find(1, 1, n, a, b)] << "\n";
    }

    return 0;
}
