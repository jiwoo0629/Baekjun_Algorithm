#include <iostream>
#include <queue>
#include <tuple>
using namespace std;

int l, r, c;
char sangbum[31][31][31];
int step[31][31][31];
bool vis[31][31][31];
int dx[6] = {-1, 0, 0, 1, 0, 0};
int dy[6] = {0, -1, 0, 0, 1, 0};
int dz[6] = {0, 0, -1, 0, 0, 1};

int main(void)
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    while(1) {
        cin >> l >> r >> c;
        if(l == 0 && r == 0 && c == 0)
            return 0;
        queue<tuple<int, int, int>> q;
        int exit_x, exit_y, exit_z;
        for(int i=0; i<l; i++) {
            for(int j=0; j<r; j++) {
                string s;
                cin >> s;
                for(int k=0; k<c; k++) {
                    sangbum[i][j][k] = s[k];
                    if(sangbum[i][j][k] == 'S') {
                        q.push({i, j, k});
                        vis[i][j][k] = true;
                    }
                    else if(sangbum[i][j][k] == 'E') {
                        exit_x = i;
                        exit_y = j;
                        exit_z = k;
                    }
                    else if(sangbum[i][j][k] == '#') 
                        step[i][j][k] = -1;
                }
            }
        }
        int time = 0;
        while(!q.empty()) {
            tuple<int, int, int> cur = q.front();
            q.pop();
            for(int i=0; i<6; i++) {
                int nx = get<0>(cur) + dx[i];  
                int ny = get<1>(cur) + dy[i];
                int nz = get<2>(cur) + dz[i];
                if(nx < 0 || nx >= l || ny < 0 || ny >= r || nz < 0 || nz >= c) continue;
                if(vis[nx][ny][nz] || sangbum[nx][ny][nz] == '#') continue;
                q.push({nx, ny, nz});
                vis[nx][ny][nz] = true;
                step[nx][ny][nz] = step[get<0>(cur)][get<1>(cur)][get<2>(cur)] + 1;
            }   
        }
        if(step[exit_x][exit_y][exit_z] == 0) cout << "Trapped!\n";
        else cout << "Escaped in " << step[exit_x][exit_y][exit_z] << " minute(s).\n";
        for(int i=0; i<l; i++) {
            for(int j=0; j<r; j++) {
                fill(sangbum[i][j], sangbum[i][j]+c, 0);
                fill(step[i][j], step[i][j] + c, 0);
                fill(vis[i][j], vis[i][j] + c, false);
            }
        }
    }

    return 0;
}
